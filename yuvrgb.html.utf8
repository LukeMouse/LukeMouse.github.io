<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=gb2312">
  <title>乡下小老鼠日常笔记</title>
  <link href="TryDoxygen.css" rel="stylesheet" type="text/css">
  <meta name="robots" content="index,nofollow">
</head>
<table width="100%" bgColor="#99CCFF">
<tr align=left>
	<td align=left height=46 class="style1"><a href="index.html">
<img class="logo" src="logo.png" height="46" alt="" 
            style="background-color: #99CCFF; background-image: none;" /></a></td> <td align=center>
        <font size=6 color="#FFFFFF" face=""><b>乡下小老鼠日常笔记</b></font>
	</td><td align=left height=46 class="style1">
<img class="space" src="space.png" height="46" alt="" 
            style="background-color: #99CCFF; background-image: none;" /></td>
</tr> </table>
<!-- 制作者 Doxygen 1.8.15 -->
</div><!-- top -->
<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">YUV和RGB格式分析 </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="section author"><dt>作者</dt><dd>fromweb(<a href="https://www.cnblogs.com/silence-hust/p/4465354.html">https://www.cnblogs.com/silence-hust/p/4465354.html</a>) <hr/>
 </dd></dl>
<p>做嵌入式项目的时候，涉及到YUV视频格式到RGB图像的转换，虽然之前有接触到RGB到都是基于opencv的处理，很多东西并不需要我们过多深入的去探讨，现在需要完全抛弃现有的算法程序，需要从内存中一个字节一个字节的处理，这就涉及到各个视频格式和图片格式是如何存储的。看了网上的很多资料，一下资料帮助蛮大。</p>
<h1><a class="anchor" id="materialyuv"></a>
YUV资料整理：</h1>
<ul>
<li><a href="http://www.fourcc.org/yuv.php">http://www.fourcc.org/yuv.php</a> YUV和RGB的分析</li>
<li><a href="http://www.cnblogs.com/azraelly/archive/2013/01/01/2841269.html">http://www.cnblogs.com/azraelly/archive/2013/01/01/2841269.html</a> 对YUV的分析</li>
<li><a href="http://ticktick.blog.51cto.com/823160/568928">http://ticktick.blog.51cto.com/823160/568928</a> 显示YUV数据</li>
<li><a href="http://www.cnblogs.com/qinjunni/archive/2012/02/23/2364446.html">http://www.cnblogs.com/qinjunni/archive/2012/02/23/2364446.html</a> </li>
</ul>
<h1><a class="anchor" id="YUV"></a>
YUV</h1>
<p>做视频采集与处理，自然少不了要学会分析YUV数据。因为从采集的角度来说，一般的视频采集芯片输出的码流一般都是YUV数据流的形式，而从视频处理（例如H.264、MPEG视频编解码）的角度来说，也是在原始YUV码流进行编码和解析，所以，了解如何分析YUV数据流对于做视频领域的人而言，至关重要。YUV是指亮度参量和色度参量分开表示的像素格式，而这样分开的好处就是不但可以避免相互干扰，还可以降低色度的采样率而不会对图像质量影响太大。</p>
<p>人眼对色度的敏感程度要低于对亮度的敏感程度。</p>
<p>YUV，分为三个分量，“Y”表示明亮度（Luminance或Luma），也就是灰度值；而“U”和“V” 表示的则是色度（Chrominance或Chroma），作用是描述影像色彩及饱和度，用于指定像素的颜色。与我们熟知的RGB类似，YUV也是一种颜色编码方法，主要用于电视系统以及模拟视频领域，它将亮度信息（Y）与色彩信息（UV）分离，没有UV信息一样可以显示完整的图像，只不过是黑白的，这样的设计很好地解决了彩色电视机与黑白电视的兼容问题。并且，YUV不像RGB那样要求三个独立的视频信号同时传输，所以用YUV方式传送占用极少的频宽。</p>
<p>YUV码流有多种不同的格式，要分析YUV码流，就必须搞清楚你面对的到底是哪一种格式，并且必须搞清楚这种格式的YUV采样和分布情况。</p>
<p>YUV格式有两大类：planar和packed。</p>
<ul>
<li>对于planar的YUV格式，先连续存储所有像素点的Y，紧接着存储所有像素点的U，随后是所有像素点的V。</li>
<li>对于packed的YUV格式，每个像素点的Y,U,V是连续交叉存储的。 </li>
</ul>
<h2><a class="anchor" id="samfashigd"></a>
1.  采样方式</h2>
<p>YUV码流的存储格式其实与其采样的方式密切相关，主流的采样方式有三种，YUV4:4:4，YUV4:2:2，YUV4:2:0，如何根据其采样格式来从码流中还原每个像素点的YUV值，因为只有正确地还原了每个像素点的YUV值，才能通过YUV与RGB的转换公式提取出每个像素点的RGB值，然后显示出来。</p>
<p>用三个图来直观地表示采集的方式吧，以黑点表示采样该像素点的Y分量，以空心圆圈表示采用该像素点的UV分量。先记住下面这段话，以后提取每个像素的YUV分量会用到。</p>
<div class="image">
<img src="yuv00.jpg" alt="yuv00.jpg"/>
</div>
<ul>
<li>YUV 4:4:4采样，每一个Y对应一组UV分量，每像素32位</li>
<li>YUV 4:2:2采样，每两个Y共用一组UV分量，每像素16位</li>
<li>YUV 4:2:0采样，每四个Y共用一组UV分量，每像素16位 </li>
</ul>
<p>平常所讲的YUV A:B:C的意思一般是指基于4个象素来讲,其中Y采样了A次，U采样了B次,V采样了C次. </p>
<p>YUV 格式可以分为打包格式packed format和平面格式planar format。打包格式将YUV分量存放在同一个数组中，通常是几个相邻的像素组成一个宏像素（macro-pixel）；而平面格使用三个数组分开存放YUV三个分量，就像是一个三维平面一样。Packed format和planner format的区别在于，packed format中的YUV是混合在一起的，因此就有了UYVY、YUYV等等，他们在码流中排列的方式有所不同。而对于planner format每一个Y分量，U分量和V分量都是以独立的平面组织的，也就是说所有的U分量都在Y分量之后出现，而V分量在所有的U分量之后。就像三个大色块一样。</p>
<h2><a class="anchor" id="savamat"></a>
2.  存储方式</h2>
<p>下面用图的形式给出常见的YUV码流的存储方式，并在存储方式后面附有取样每个像素点的YUV数据的方法，其中，Cb、Cr的含义等同于U、V。因为我们在实验中芷使用到YUV422的格式，这里只介绍这个，其他的可以去其他博文了找。</p>
<h3><a class="anchor" id="uifsdfad"></a>
（1） YUYV 格式 （属于YUV422）</h3>
<div class="image">
<img src="yuv01.png" alt="yuv01.png"/>
</div>
<p> YUYV（YUY2）为YUV422采样的存储格式中的一种，相邻的两个Y共用其相邻的两个Cb（U）、Cr（V），分析，对于像素点Y'00、Y'01 而言，其Cb、Cr的值均为 Cb00、Cr00，其他的像素点的YUV取值依次类推。YVYU（YVY2）也一样，只是ＵＶ的位置调换了一下，先V后U。 </p><div class="image">
<img src="yuv01.jpg" alt="yuv01.jpg"/>
</div>
 <h3><a class="anchor" id="fajsads"></a>
（2） UYVY 格式 （属于YUV422）</h3>
<div class="image">
<img src="yuv02.png" alt="yuv02.png"/>
</div>
 <p>UYVY格式也是YUV422采样的存储格式中的一种，只不过与YUYV不同的是UV的排列顺序不一样而已，还原其每个像素点的YUV值的方法与上面一样。 </p><div class="image">
<img src="yuv02.jpg" alt="yuv02.jpg"/>
</div>
 <h3><a class="anchor" id="jfajagf"></a>
（3） YUV422P（属于YUV422）</h3>
<div class="image">
<img src="yuv03.png" alt="yuv03.png"/>
</div>
 <p>YUV422P也属于YUV422的一种，它是一种Plane模式，即打包模式，并不是将YUV数据交错存储，而是先存放所有的Y分量，然后存储所有的U（Cb）分量，最后存储所有的V（Cr）分量，如上图所示。其每一个像素点的YUV值提取方法也是遵循YUV422格式的最基本提取方法，即两个Y共用一个UV。比如，对于像素点Y'00、Y'01 而言，其Cb、Cr的值均为 Cb00、Cr00。以YUV420 planar数据为例， 以720×480大小图象YUV420 planar为例，其存储格式是： 共大小为(720×480×3&gt;&gt;1)字节，分为三个部分:</p><ul>
<li>Y,U和VY分量：(720×480)个字节</li>
<li>U(Cb)分量：(720×480&gt;&gt;2)个字节</li>
<li>V(Cr)分量：(720×480&gt;&gt;2)个字节 </li>
</ul>
<p>三个部分内部均是行优先存储，三个部分之间是Y,U,V 顺序存储。即YUV数据的0－－720×480字节是Y分量值，720×480－－720×480×5/4字节是U分量720×480×5/4 －－720×480×3/2字节是V分量。这里Y分量其实就是我们常说的灰度值，所以需要对图片进行灰度处理的话，可以直接提取出图片的Y分量。这点对我们后面的处理很重要。</p>
<p><b>YUV4:4:4</b></p>
<p>下面的四个像素为: [Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3]</p>
<p>存放的码流为: Y0 U0 V0 Y1 U1 V1 Y2 U2 V2 Y3 U3 V3 映射出像素点保持原样 </p>
<p><b>YUV4:2:2</b></p>
<p>每个色差信道的抽样率是亮度信道的一半，所以水平方向的色度抽样率只是4:4:4的一半。对非压缩的8比特量化的图像来说，每个由两个水平方向相邻的像素组成的宏像素需要占用4字节内存。下面的四个像素为：[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3] 存放的码流为：Y0 U0 Y1 V1 Y2 U2 Y3 V3 映射出像素点为：[Y0 U0 V1] [Y1 U0 V1] [Y2 U2 V3] [Y3 U2 V3] </p>
<p><b>YUV 4:1:1</b></p>
<p>4:1:1的色度抽样，是在水平方向上对色度进行4:1抽样。对于低端用户和消费类产品这仍然是可以接受的。对非压缩的8比特量化的视频来说，每个由4个水平方向相邻的像素组成的宏像素需要占用6字节内存。原来四个像素为: [Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3], 存放的码流为: Y0 U0 Y1 Y2 V2 Y3 还原出像素点为：[Y0 U0 V2] [Y1 U0 V2] [Y2 U0 V2] [Y3 U0 V2],用6个YUV分量描述了原来的12个YUV分量，因此压缩比为1/2，平均来讲，就是用了12bit表示了一个象素点，原来YUV(8bit*3)是24bit。 </p>
<p><b>YUV4:2:0</b></p>
<p>4:2:0并不意味着只有Y，Cb而没有Cr分量。它指得是对每行扫描线来说，只有一种色度分量以2:1的抽样率存储。相邻的扫描行存储不同的色度分 量，也就是说，如果一行是4:2:0的话，下一行就是4:0:2，再下一行是4:2:0...以此类推。对每个色度分量来说，水平方向和竖直方向的抽样率 都是2:1，所以可以说色度的抽样率是4:1。对非压缩的8比特量化的视频来说，每个由2x2个2行2列相邻的像素组成的宏像素需要占用6字节内存。</p>
<p>下面八个像素为：[Y0 U0 V0] [Y1 U1 V1] [Y2 U2 V2] [Y3 U3 V3] [Y5 U5 V5] [Y6 U6 V6] [Y7U7 V7] [Y8 U8 V8];存放的码流为：Y0 U0 Y1 Y2 U2 Y3 Y5 V5 Y6 Y7 V7 Y8;映射出的像素点为：[Y0 U0 V5] [Y1 U0 V5] [Y2 U2 V7] [Y3 U2 V7] [Y5 U0 V5] [Y6 U0 V5] [Y7U2 V7] [Y8 U2 V7]</p>
<h1><a class="anchor" id="rgbinodsfs"></a>
RGB</h1>
<p>计算机彩色显示器显示色彩的原理与彩色电视机一样，都是采用R（Red）、G（Green）、B（Blue）相加混色的原理：通过发射出三种不同强度的电子束，使屏幕内侧覆盖的红、绿、蓝磷光材料发光而产生色彩。这种色彩的表示方法称为RGB色彩空间表示（它也是多媒体计算机技术中用得最 多的一种色彩空间表示方法）。根据色度学的介绍，不同波长的单色光会引起不同的彩色感觉，但相同的彩色感觉却可以来源于不同的光谱成分组合。自然界中几乎所有的颜色都能用三种基本彩色混合配出，在彩色电视技术中选择红色、绿色、和蓝色作为三基色。其他的颜色都可以用红色、绿色和蓝色按照不同的比例混合而成。所选取的红色、绿色和蓝色三基色空间。简称为RGB颜色空间。</p>
<ul>
<li>RGB565 每个像素用16位表示，RGB分量分别使用5位、6位、5位</li>
<li>RGB555 每个像素用16位表示，RGB分量都使用5位（剩下1位不用）</li>
<li>RGB24 每个像素用24位表示，RGB分量各使用8位</li>
<li>RGB32 每个像素用32位表示，RGB分量各使用8位（剩下8位不用）</li>
<li>ARGB32 每个像素用32位表示，RGB分量各使用8位（剩下的8位用于表示Alpha通道值） </li>
</ul>
<h2><a class="anchor" id="afahsdfhs"></a>
RGB565（我们使用的格式）</h2>
<p>使用16位表示一个像素，这16位中的5位用于R，6位用于G，5位用于B。程序中通常使用一个字（WORD，一个字等于两个字节）来操作一个像素。当读出一个像素后，这个字的各个位意义如下： </p>
<p>高字节 || 低字节</p>
<p>R R R R R G G G || G G G B B B B B</p>
<p>可以组合使用屏蔽字和移位操作来得到RGB各分量的值： </p><pre class="fragment">#define RGB565_MASK_RED    0xF800
#define RGB565_MASK_GREEN  0x07E0
#define RGB565_MASK_BLUE   0x001F
R = (wPixel &amp; RGB565_MASK_RED) &gt;&gt; 11;   // 取值范围0-31
G = (wPixel &amp; RGB565_MASK_GREEN) &gt;&gt; 5;  // 取值范围0-63
B =  wPixel &amp; RGB565_MASK_BLUE;         // 取值范围0-31
#define RGB(r,g,b) (unsigned int)( (r|0x08 &lt;&lt; 11) | (g|0x08 &lt;&lt; 6) | b|0x08 )
#define RGB(r,g,b) (unsigned int)( (r|0x08 &lt;&lt; 10) | (g|0x08 &lt;&lt; 5) | b|0x08 )
</pre><p> 该代码可以解决24位与16位相互转换的问题 </p>
<h2><a class="anchor" id="asghkargb"></a>
RGB555</h2>
<p>是另一种16位的RGB格式，RGB分量都用5位表示（剩下的1位不用）。使用一个字读出一个像素后，这个字的各个位意义如下： </p>
<p>高字节 || 低字节</p>
<p>X R R R R G G || G G G B B B B B （X表示不用，可以忽略）</p>
<p>RGB24使用24位来表示一个像素，RGB分量都用8位表示，取值范围为0-255,RGB32使用32位来表示一个像素，RGB分量各用去8位，剩下的8位不用</p>
<h2><a class="anchor" id="afasdsjaf"></a>
RGB24</h2>
<p>RGB24使用24位来表示一个像素，RGB分量都用8位表示，取值范围为0-255。注意在内存中RGB各分量的排列顺序为：BGR BGR BGR…。通常可以使用RGBTRIPLE数据结构来操作一个像素，它的定义为： </p><pre class="fragment">typedef struct tagRGBTRIPLE {
BYTE rgbtBlue; // 蓝色分量
BYTE rgbtGreen; // 绿色分量
BYTE rgbtRed; // 红色分量
} RGBTRIPLE;
</pre> <h2><a class="anchor" id="dsjgsjgsafsdf"></a>
RGB32</h2>
<p>RGB32使用32位来表示一个像素，RGB分量各用去8位，剩下的8位用作Alpha通道或者不用。（ARGB32就是带Alpha通道的RGB24。）注意在内存中RGB各分量的排列顺序为：BGRA BGRA BGRA…。通常可以使用RGBQUAD数据结构来操作一个像素，它的定义为：</p>
<pre class="fragment">typedef struct tagRGBQUAD {
BYTE rgbBlue; // 蓝色分量
BYTE rgbGreen; // 绿色分量
BYTE rgbRed; // 红色分量
BYTE rgbReserved; // 保留字节（用作Alpha通道或忽略）
} RGBQUAD。
</pre> </div></div><!-- PageDoc -->
</div><!-- contents -->
<hr>
<MARQUEE behavior="alternate">乡下小老鼠倾力打造 &reg</MARQUEE>
</html>
