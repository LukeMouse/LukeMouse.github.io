<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=gb2312">
  <title>乡下小老鼠日常笔记</title>
  <link href="TryDoxygen.css" rel="stylesheet" type="text/css">
  <meta name="robots" content="index,nofollow">
</head>
<table width="100%" bgColor="#99CCFF">
<tr align=left>
	<td align=left height=46 class="style1"><a href="index.html">
<img class="logo" src="logo.png" height="46" alt="" 
            style="background-color: #99CCFF; background-image: none;" /></a></td> <td align=center>
        <font size=6 color="#FFFFFF" face=""><b>乡下小老鼠日常笔记</b></font>
	</td><td align=left height=46 class="style1">
<img class="space" src="space.png" height="46" alt="" 
            style="background-color: #99CCFF; background-image: none;" /></td>
</tr> </table>
<!-- 制作者 Doxygen 1.8.15 -->
</div><!-- top -->
<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">软件开发者必须知道的最基本的Unicode字符集 </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="section author"><dt>作者</dt><dd>Joel Spolsky traslate <a href="http://www.joelonsoftware.com/articles/Unicode.html">http://www.joelonsoftware.com/articles/Unicode.html</a> <hr/>
 </dd></dl>
<p>不知您是否曾经对内容类型标签（Content-Type tag)感到困惑，你可能遇到过，你想放置在HTML中的标签，却不知道它应该是什么样子。</p>
<p>你是否收到过来自Bulgaria的朋友的邮件，而标题上看起来是这样的“??? ?????? ??? ????"？</p>
<p>我非常失望的发现大多数的软件开发者对字符集、编码、Unicode等相关领域的神秘世界并不熟悉。几年前对FogBUGZ的beta版测试，引发了它是否支持接收到的电子邮件中包含日文的疑问。日文？还会有日文电子邮件？我没了主意。当我仔细检查我们使用的用于解析MIME电子邮件信息的商业ActiveX控件时，我发现它错误的使用了字符集，我们实际上不得不编写代码撤销他的错误转换，然后用正确的转换重做。当我查看另一个商业库的时候，无独有偶，它的字符编码实现也错漏百出。我联系了那个模块的开发者，与大多数开发者一样，他不知道问题是如何产生的，对此无能为力。</p>
<p>事实并非如此，当我发现PHP这一流行的Web开发工具，轻松的使用8位字符，几乎完全忽略了字符编码问题，弥补了不可能开发开发国际化Web应用程序的缺陷，我认为这就够了。</p>
<p>因此，在这里我不得不说：如果你是一个工作在2003的程序员，并且对字符、字符集、编码和Unicode的基础并不了解，那么如果我抓住了你，我发誓我将让你在潜水艇内剥6个月的洋葱来惩罚你。</p>
<p>并且<b>事情并没有你想象的那么难</b>。本文我将告诉你每一个正在工作的程序员应该知道的，那些将纯文本、ascii和8位字符当做一回事的家伙不仅仅是错了，还是无可救药。如果你还那样编程，你并不比一个不相信病菌的医生好多少。读完本文之前，请你不要再写一行代码了。</p>
<p>开始之前，我不得不说，如果你属于少数的了解国际化的那群人，你会发现整个的讨论有些过于简单。我在这里设置一个下限，这样大家就会知道接下来会讨论什么，并能写出用任何语言都能工作而不仅仅是英语的子集（不包含音标）的文本。我还要告诉你字符处理仅仅是创建国际化软件需要考虑的一小部分，我一次只能写一个方面，这次是字符集。</p>
<h1><a class="anchor" id="historypers"></a>
历史视角</h1>
<p>最容易理解这些的方法是按时间顺序。你可能认为我在这里要讨论像EBCDIC这样古老的字符集，但是，你错了。EBCDIC和你的生活并不相关，我们不必要回溯到那么早。</p>
<p>我们回溯到半史前时代，Unix被发明，K&amp;R正在编写The C Programming Language，所有的一切都很简单。EBCDIC正在退出历史舞台。唯一相关的字符是无音符的英文字母，我们称其为ASCII，它使用32到127的数字表示所有的字符。空格是32，‘A'是65等。他可以被方便的存储在7位比特中。那个时代的计算机大多使用8比特字节，除可以存储所有可能的ASCII字符外，还有一个比特的空闲。如果你心存险恶，你可以实现邪恶的目的：WordStar的昏暗灯泡实际上打开了高字节来指示单词中的最后一个字母，可惜WordStar只能处理英文文本。32以下的编码称作不可打印字符。它们被用作控制字符，如7表示蜂鸣12表示打印换页。</p>
<p>如果你是一个讲英语的人一切都是那么美好。因为字节有空间升级为8比特，很多人开始想：哎呀，我可以将128~255占为己用。问题是同时又很多人出现了该想法，并且他们都有自己的想法在128~255间存放什么。IBM-PC的OEM字符集为欧洲语言提供了一些重音字符和一些划线字符（横杠、竖杠、横杠右侧带小竖线等）。你可以使用这些划线绘制字符在屏幕上绘制漂亮的盒子和线条。你在干洗店的8088计算机上仍然可以看到他们的影子。实际上，当美国以外的人们开始购买PC时，所有种类的不同的OEM字符集都是凭空想象的，都是按照自己的想法使用128以上的字符。例如，在一些PC上编码130显示为é，然而以色列出售的计算机上它表示希伯来字符Gimel(?)，因此当美国人给以色列人发送résumés时，他们将接收到r?sum?s。多数情况下（如俄国）对128以上的字符有不同的想法，因此你可能不能信任俄语文档中的字符的映射。</p>
<p>最终OEM混战被ANSI标准统一了，在ANSI标准中大家都认同128以下的字符，这与ASCII毫无差异，但是在处理128及以上的字符时根据你生活在哪里有众多不同的方式。这些不同的系统被称作编码页（code page）。因此举例来说以色列的DOS使用的编码页称作862，希腊使用737.在128以下相同，但是在128以上不同（这里保存了所有有趣的字符）。MS-DOS的国际化版本包含许多这样的编码页，用于处理所有的类似从英语到冰岛的转换，它甚至还有一些使用多种语言的编码页在同一台计算机上处理诸如世界语和加利西亚语。哇哦太棒了！但是，让希伯来语和希腊语在同一台计算机上使用是完全不可能的，除非你自己编写程序使用位图图型显示所有的一切，这是因为希伯来语和希腊语使用不同的编码页对相同的高字节数采用不同的解释。</p>
<p>同时，在亚洲，发生了更令人疯狂的事情，字母表中有成千上万的单词，仅仅8个比特完全不够用。这通常使用称作（双字节字符集）DBCS的混合系统解决，其中一些字符使用一个字节其他的占用两个字节。在字符串中向前移动比较简单，但是向后移动几乎不可能。程序员被要求不能使用S++和S&ndash;在字符串中前后移动，而是使用诸如Windows的AnsiNext和AnsiPrev，它们知道如何处理这个烂摊子。</p>
<p>然而很多人任然假定一个字节就是一个字符，一个字符有8个比特，只要你不将一个字符串从一台计算机传输到另一台计算机，或者使用多于一种语言，这种做法将非常有效。但是，显而易见只要有网络，将字符串从一台计算机传输到另一台计算机就是一件非常平常的事情，于是这种策略轰然倒塌了。非常幸运的是Unicode此时诞生了。 </p>
<h1><a class="anchor" id="Unicode_Uni"></a>
Unicode</h1>
<p>Unicode是一个大胆的尝试，创建一个单字符集包含地球上所有可能的书写系统甚至想克林贡这样虚拟的系统。一些人错误的认为Unicode仅仅是一个16比特的编码，每个字符占16比特，因此一共有65536个可能的字符。<b>事实并非如此</b>。这个关于Unicode的一个最为常见的误识，如果你也如此，不必难过。</p>
<p>实际上Unicode有不同的考虑字符的方式，你必须使用Unicode认知事物的方式进行思维，否则你不会有所进步。</p>
<p>现在，我们假定一个字符映射到了一些比特，使你可以存储到磁盘或内存中：</p>
<pre class="fragment">A-&gt;0100 0001
</pre> <p>在Unicode中一个字符映射到一个编码点（这是理论概念）。一个编码点如何在内存中或磁盘上表示一个字符是题外话。在Unicode中字母A是一个柏拉图思想，它只是漂浮在空中，柏拉图的A与B不同，也和a不同，但是和宋体A及斜体A相同。这种Time New Roman字体的A与经典字体的A相同但是和小写字母a不同的想法看起来不会引发争论，但是在一些仅仅区分字母的语言中会引起争论。德语字符?是一个真正的字符还是仅仅是SS书写的假象？如果世界尽头的一个字符的形状发生了改变，他是不是一个不同的字符？希伯来人说是，阿拉伯人说否。无论如何，在过去的几十年中聪明的Unicode阵营中的人弄清了他们的区别，伴随着大量的高度政治辩论，你不必再为此担心。他们已经完全的被区分了。</p>
<p>所有字母表中的每一个柏拉图字母被Unicode阵营赋予了一个神奇的数字，写出来类似U+0639。这个神奇的数字称作编码点。U+表示Unicode，数字是十六进制。U+0639是一个阿拉伯字符Ain，英语的A为U+0041。你可以在Windows 2000/XP使用charmap工具或访问Unicode网站找的他们。</p>
<p>没有真正的限制Unicode可以定义的文字的个数，实际上它已经超出了65536个，因此不是所有的Unicode文字可以被压缩在两个字节以内，但他如何做到的仍然很神秘。</p>
<p>好了，假如说我们有一个字符串：Hello，在Unicode中将对应下述5个编码点： </p><pre class="fragment">U+0048 U+0065 U+006C U+006C U+006F
</pre> <p>仅仅是一堆编码点（其实是数字），我们还没有提及如何在内存中存储他们和在电子邮件消息中表示他们。</p>
<h1><a class="anchor" id="encodings"></a>
编码</h1>
<p>这就需要提到编码了，最早的Unicode编码，导致了两个字节的神秘，仅仅将每组数字存储在两个字节中。因此Hello变成了</p>
<pre class="fragment">00 48 00 65 00 6C 00 6C 00 6F
</pre> <p>对吗？没有这么快！它还可以是</p>
<pre class="fragment">48 00 65 00 6C 00 6C 00 6F 00 
</pre> <p>技术角度看，这也没错，我也认为可以这样。并且实际上早期的实现者希望可以使用高端（High-endian）或低端（low-endian）模式存储他们的编码点只要这样可以是他们的CPU计算尽可能的快。花落花开已经有两种方式存储Unicode，因此人们被迫拿出存储的离奇约定在每一个Unicode字符串的开头存储FE FF，这被称作UNICODE字节序标识。如果你交换你的高低位字节他将看起来像FF FE，当人们读你的字符串的时候他们就会知道是否需要交换所有的字节。并不是所有的Unicode字符串在开头都有一个字节序标识。</p>
<p>安静了一段时间，但是程序员又开始抱怨：看看这些Zeros。因为他们是美国人，他们只看英语文本，这些很少使用U+00FF以上的编码点。此外，他们是加利福尼亚自由的嬉皮士，谁甘愿受拘束（呵呵）。如果他们是德州人，他们也不会在乎消耗两倍字节的油。但是这些加州懦夫无法忍受对于字符串增加一倍字节的想法。并且有各种使用ANSI和DBCS字符集的文档，谁来转换他们？莫伊？出于这个原因，多数人决定忽略Unicode，在此期间事情变得更糟。</p>
<p>因此，光辉的UTF-8被发明了。UTF-8是另一套用于存储您的Unicode编码点的系统，那些神奇的U+数字在内存中使用8比特字节。在UTF-8中，所有的编码点在0~127中的被存储在一个字节中，只有那些编码点在128以上的使用2、3实际上到6个字节</p>
<center> <div class="image">
<img src="utf8.png" alt="utf8.png"/>
</div>
 </center> <p>这样做有整齐的副作用，英文文本看起来就是UTF-8，就像在ASCII中一样，因此美国人不会注意到什么不妥。其他地方的人蹦高了。具体来说，Hello的Unicode编码是U+0048 U+0065 U+006C U+006C U+006F，将被保存为48 65 6C 6C 6F，和ASCII、ANSI以及所有的OEM字符集都相同。此时，如果你想使用一个重音字母或希腊字母或克林贡语，你不得不使用多个字节来存储一个编码点，但这点美国人不会注意到。（UTF-8也有一个很好的属性：忽略传统的字符串处理码需要使用一个0字节作为空终止字符，他不会截断字符串）</p>
<p>至此我已经告诉了你三种编码Unicode的方式。传统的，将其存储在两个字节中的方法（由于其含有两个字节）称作UCS-2或UTF-16（因为它有16个比特），你还需要弄清他是高端UCS-2还是低端UCS-2。还有最新流行的UTF-8标准，他有着良好的属性，并且如果你恰巧使用英文文本并且完全不需要知道除了ASCII还有其他你的工作将非常顺畅。</p>
<p>实际上还有很多的编码Unicode的方式。例如UTF-7和UTF-8极为相像，但是它的最高位总是0，所以如果你不得不通过某种够严厉的警察国家的认为7位就足够的电子邮件系统传递Unicode，谢天谢地你可以毫发无损的通过。还有UCS-4使用4字节存放每一个编码点，它的优点是每一个编码点可以存储在等量的字节中，然而，遗憾的是即使是德州人也不会这么大胆的浪费那么多的内存。</p>
<p>事实上现在你考虑的东西，被Unicode编码点（这些编码点也可以使用任何老派的编码方案进行）表示的按照柏拉图式的思想组织的字母。例如你可以使用ANSCII编码Unicode字符串hello为(U+0048 U+0065 U+006C U+006C U+006F) 或者使用老的OEM希腊语编码，或者希伯来ANSI编码，或者几百种迄今为止发明的编码方式。有一个陷阱：如果你想在编码中表示的编码，没有相应的Unicode编码点，一些字母可能显示不出来，你通常会看到一个问号？如果你运气不错你会看到一个盒子，你看到的是? -&gt; ?</p>
<p>成百上千的传统编码仅能正确的存储一些编码点，将其他的编码点转换为问号。一些流行的英文文本编码是Windows-1252（为西欧语言制定的Windows 9X标准）和ISO-8859-1，aka Latin-1（对西欧语言也非常有用）。但是试图在这些编码中存储俄语和希伯来语字母将会得到很多的问号。UTF 7，8，16和32都有能存储任意编码点的优质属性。</p>
<h1><a class="anchor" id="smifae"></a>
关于编码最重要的因素</h1>
<p>如果你已经忘记了我讲过的一切，请谨记一个极为重要的因素：<b>有一个字符串却不知道它使用的编码方式简直是胡闹。</b>你不能在将头埋在沙中并假装普通文本是ASCII。<b>这里根本就没有叫做纯文本的东西</b>。</p>
<p>如果你在内存、文件或一个电子邮件信息中有一个字符串，你必须知道它使用的是那种编码，否则你将不能正确的给用户解释或展示。</p>
<p>几乎每一个愚蠢的“我的网站看起来在胡言乱语”或者“当我使用重音符号时，她不能读取我的邮件”问题都归结于一个天真的程序员没有告诉我一个特定的字符串编码时使用的是UTF-8或ASCII或ISO 8859-1（Latin 1）或Windows1252（西欧），你根本不能正确的显示它，甚至找不出它的尽头。编码点127以上有超过100中编码方式，所有的尝试都是无效的。</p>
<p>我们如何保存一个字符串使用的编码方式？有一个标准的方法做到这一点。对于电子邮件，你需要在表格中的头部有一个字符串：</p>
<pre class="fragment">Content-Type: text/plain; charset="UTF-8"
</pre> <p>对于网页，初始的想法是，web服务器将返回一个类似的Content-Type http头及网页本身，不是在HTML中，而是作为HTML页面之前发送的反应头。这导致了问题的发生，假想你有一个大型网站有很多站点和由很多不同语言并使用不同的诸如微软FrontPage草图生成的编码制作的网页。Web服务器并不知道每个文件使用什么编码方式，因此它不能发送Content-Type头。</p>
<p>如果你将HTML的Content-Type使用一种特殊的标签放到HTML文件本身将会非常的方便。当然这会使纯粹主义者疯狂，不知道文件的编码方式怎么读取一个HTML文件？幸运的是，几乎所有的通用编码集对32~127之间的字符做了同样的事，因此你总是可以在HTML页中找到这一点而不用使用奇怪的字符：</p>
<pre class="fragment">&lt;html&gt;
 &lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
</pre> <p>只不过meta标签页必须放在&lt;head&gt;最开始，因为web浏览器一看到这个标签就会停止解析，并重新使用你指定的编码方式进行解析。</p>
<p>如果Web浏览器在Content-Type和http头的meta标签中没有找到编码类型，它将怎么办？IE实际做了一些有趣的事：它试着猜想，基于不同的字节在不同语言（使用的语言和编码）的编码中出现的频率。因为各种旧8位代码页倾向于将他们的在128~255间的国际字符放在不同的范围，并且有不同的字母使用直方图，这使得这种机制有可能奏效。 </p>
</div></div><!-- PageDoc -->
</div><!-- contents -->
<hr>
<MARQUEE behavior="alternate">乡下小老鼠倾力打造 &reg</MARQUEE>
</html>
